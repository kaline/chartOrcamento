(function (d3) {
  'use strict';

  const titleText = 'Despesas';
  const xAxisLabelText = 'Valores empenhados';

  const svg = d3.select('svg');

  const width = +svg.attr('width');
  const height = +svg.attr('height');

  const render = (data) => {
    const xValue = (d) => d['Empenhado'];
    const yValue = (d) => d.Ano;
    const margin = {
      top: 50,
      right: 60,
      bottom: 17,
      left: 150,
    };
    const innerWidth =
      width - margin.left - margin.right;
    const innerHeight =
      height - margin.top - margin.bottom;

    const xScale = d3.scaleLinear()
      .domain([0, d3.max(data, xValue)])
      .range([0, innerWidth]);

    console.log("range " + xScale.range());
    console.log("domain -> "+ xScale.domain());


    const yScale = d3.scaleBand()
      .domain(data.map(yValue))
      .range([0, innerHeight])
      .padding(0.1);

    const g = svg
      .append('g')
      .attr(
        'transform',
        `translate(${margin.left},${margin.top})`
      );

    const xAxisTickFormat = (number) =>
      d3.format('.3s')(number);

    const xAxis = d3.axisBottom(xScale)
      .tickFormat(xAxisTickFormat)
      .tickSize(-innerHeight);

    g.append('g')
      .call(d3.axisLeft(yScale))
      .selectAll('.domain, .tick line')
      .remove();

    const xAxisG = g
      .append('g')
      .call(xAxis)
      .attr(
        'transform',
        `translate(0,${innerHeight})`
      );

    xAxisG.select('.domain').remove();

    xAxisG
      .append('text')
      .attr('class', 'axis-label')
      .attr('y', 65)
      .attr('x', innerWidth / 2)
      .attr('fill', 'black')
      .text(xAxisLabelText);

    g.selectAll('rect')
      .data(data)
      .enter()
      .append('rect')
      .attr('y', (d) => yScale(yValue(d)))
      .attr('width', (d) => xScale(xValue(d)))
      .attr('height', yScale.bandwidth());

    g.append('text')
      .attr('class', 'title')
      .attr('y', -10)
      .text(titleText);
  };

  d3.csv('orcamentoData.csv').then((data) => {
    data.forEach((d) => {
      //populationNew = +d.population;
      d.population= +d.population;
    });
    render(data);
  });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIHNlbGVjdCxcbiAgY3N2LFxuICBzY2FsZUxpbmVhcixcbiAgbWF4LFxuICBzY2FsZUJhbmQsXG4gIGF4aXNMZWZ0LFxuICBheGlzQm90dG9tLFxuICBmb3JtYXQsXG59IGZyb20gJ2QzJztcblxuY29uc3QgdGl0bGVUZXh0ID0gJ0Rlc3Blc2FzJztcbmNvbnN0IHhBeGlzTGFiZWxUZXh0ID0gJ1ZhbG9yZXMgZW1wZW5oYWRvcyc7XG5cbmNvbnN0IHN2ZyA9IHNlbGVjdCgnc3ZnJyk7XG5cbmNvbnN0IHdpZHRoID0gK3N2Zy5hdHRyKCd3aWR0aCcpO1xuY29uc3QgaGVpZ2h0ID0gK3N2Zy5hdHRyKCdoZWlnaHQnKTtcblxuY29uc3QgcmVuZGVyID0gKGRhdGEpID0+IHtcbiAgY29uc3QgeFZhbHVlID0gKGQpID0+IGRbJ0VtcGVuaGFkbyddO1xuICBjb25zdCB5VmFsdWUgPSAoZCkgPT4gZC5Bbm87XG4gIGNvbnN0IG1hcmdpbiA9IHtcbiAgICB0b3A6IDUwLFxuICAgIHJpZ2h0OiA2MCxcbiAgICBib3R0b206IDE3LFxuICAgIGxlZnQ6IDE1MCxcbiAgfTtcbiAgY29uc3QgaW5uZXJXaWR0aCA9XG4gICAgd2lkdGggLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodDtcbiAgY29uc3QgaW5uZXJIZWlnaHQgPVxuICAgIGhlaWdodCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tO1xuXG4gIGNvbnN0IHhTY2FsZSA9IHNjYWxlTGluZWFyKClcbiAgICAuZG9tYWluKFswLCBtYXgoZGF0YSwgeFZhbHVlKV0pXG4gICAgLnJhbmdlKFswLCBpbm5lcldpZHRoXSk7XG5cbiAgY29uc29sZS5sb2coXCJyYW5nZSBcIiArIHhTY2FsZS5yYW5nZSgpKTtcbiAgY29uc29sZS5sb2coXCJkb21haW4gLT4gXCIrIHhTY2FsZS5kb21haW4oKSk7XG5cblxuICBjb25zdCB5U2NhbGUgPSBzY2FsZUJhbmQoKVxuICAgIC5kb21haW4oZGF0YS5tYXAoeVZhbHVlKSlcbiAgICAucmFuZ2UoWzAsIGlubmVySGVpZ2h0XSlcbiAgICAucGFkZGluZygwLjEpO1xuXG4gIGNvbnN0IGcgPSBzdmdcbiAgICAuYXBwZW5kKCdnJylcbiAgICAuYXR0cihcbiAgICAgICd0cmFuc2Zvcm0nLFxuICAgICAgYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwke21hcmdpbi50b3B9KWBcbiAgICApO1xuXG4gIGNvbnN0IHhBeGlzVGlja0Zvcm1hdCA9IChudW1iZXIpID0+XG4gICAgZm9ybWF0KCcuM3MnKShudW1iZXIpO1xuXG4gIGNvbnN0IHhBeGlzID0gYXhpc0JvdHRvbSh4U2NhbGUpXG4gICAgLnRpY2tGb3JtYXQoeEF4aXNUaWNrRm9ybWF0KVxuICAgIC50aWNrU2l6ZSgtaW5uZXJIZWlnaHQpO1xuXG4gIGcuYXBwZW5kKCdnJylcbiAgICAuY2FsbChheGlzTGVmdCh5U2NhbGUpKVxuICAgIC5zZWxlY3RBbGwoJy5kb21haW4sIC50aWNrIGxpbmUnKVxuICAgIC5yZW1vdmUoKTtcblxuICBjb25zdCB4QXhpc0cgPSBnXG4gICAgLmFwcGVuZCgnZycpXG4gICAgLmNhbGwoeEF4aXMpXG4gICAgLmF0dHIoXG4gICAgICAndHJhbnNmb3JtJyxcbiAgICAgIGB0cmFuc2xhdGUoMCwke2lubmVySGVpZ2h0fSlgXG4gICAgKTtcblxuICB4QXhpc0cuc2VsZWN0KCcuZG9tYWluJykucmVtb3ZlKCk7XG5cbiAgeEF4aXNHXG4gICAgLmFwcGVuZCgndGV4dCcpXG4gICAgLmF0dHIoJ2NsYXNzJywgJ2F4aXMtbGFiZWwnKVxuICAgIC5hdHRyKCd5JywgNjUpXG4gICAgLmF0dHIoJ3gnLCBpbm5lcldpZHRoIC8gMilcbiAgICAuYXR0cignZmlsbCcsICdibGFjaycpXG4gICAgLnRleHQoeEF4aXNMYWJlbFRleHQpO1xuXG4gIGcuc2VsZWN0QWxsKCdyZWN0JylcbiAgICAuZGF0YShkYXRhKVxuICAgIC5lbnRlcigpXG4gICAgLmFwcGVuZCgncmVjdCcpXG4gICAgLmF0dHIoJ3knLCAoZCkgPT4geVNjYWxlKHlWYWx1ZShkKSkpXG4gICAgLmF0dHIoJ3dpZHRoJywgKGQpID0+IHhTY2FsZSh4VmFsdWUoZCkpKVxuICAgIC5hdHRyKCdoZWlnaHQnLCB5U2NhbGUuYmFuZHdpZHRoKCkpO1xuXG4gIGcuYXBwZW5kKCd0ZXh0JylcbiAgICAuYXR0cignY2xhc3MnLCAndGl0bGUnKVxuICAgIC5hdHRyKCd5JywgLTEwKVxuICAgIC50ZXh0KHRpdGxlVGV4dCk7XG59O1xuXG5jc3YoJ29yY2FtZW50b0RhdGEuY3N2JykudGhlbigoZGF0YSkgPT4ge1xuICBkYXRhLmZvckVhY2goKGQpID0+IHtcbiAgICAvL3BvcHVsYXRpb25OZXcgPSArZC5wb3B1bGF0aW9uO1xuICAgIGQucG9wdWxhdGlvbj0gK2QucG9wdWxhdGlvbjtcbiAgfSk7XG4gIHJlbmRlcihkYXRhKTtcbn0pO1xuIl0sIm5hbWVzIjpbInNlbGVjdCIsInNjYWxlTGluZWFyIiwibWF4Iiwic2NhbGVCYW5kIiwiZm9ybWF0IiwiYXhpc0JvdHRvbSIsImF4aXNMZWZ0IiwiY3N2Il0sIm1hcHBpbmdzIjoiOzs7RUFXQSxNQUFNLFNBQVMsR0FBRyxVQUFVLENBQUM7RUFDN0IsTUFBTSxjQUFjLEdBQUcsb0JBQW9CLENBQUM7QUFDNUM7RUFDQSxNQUFNLEdBQUcsR0FBR0EsU0FBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFCO0VBQ0EsTUFBTSxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0VBQ2pDLE1BQU0sTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNuQztFQUNBLE1BQU0sTUFBTSxHQUFHLENBQUMsSUFBSSxLQUFLO0VBQ3pCLEVBQUUsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0VBQ3ZDLEVB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